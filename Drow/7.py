import os
from importlib import reload
from read.sys.core import to_list_kavichki, whats_file_name
iterabl = 0

"""
Модули могут возвращать значения в масивах, но:
 на каждое значение есть два елемента значение и команда или внутр.
 команда для обработки
"""

"""
задуматься
об блоках кода
о ветлвении #if #elsif #elif #endif #[ #]
о циклах чтение #foreach #endforeach #listforeach #[ #]
о циклах счотчик #foreach #endforeach #numforeach #[ #]
о импорте модулей, терминалов общей командой #include
об замене слов на фразу #define
об переменной и списке #list #var
об удалении и возвращении значений списка и перменной
об переключателе #switch #break #[ #]
об выходах #exit #break #return и прочих...

также задуматься об резервных копиях перед перемещением и копированием
 и записью - сделать флажками...
"""

"""
Нужно сделать вызов terminal файла командой /terminal с атриботом -a.
решить проблему с модулями и их возвращениями и описаниями что делать
 терминалу с модулем...
сделать команду /start для запуска паралельного файла, решить проблему.
сделать команду /term для вызова еще одного терминала
"""

"""
1. Нужен новый to_list для разделения слов по пробелам если не внутри ""
 или '' или ``.
2. Также нужно to_list для создания внутренних одинарных масивов если не
 внутри () или [] или {} или <> где первый елемент имеет имя вида
 скобок: квадрат, триугольник, овал, фигур.
3. \" \' \`
"""



"""
Нужно некоторые функции разделить на модули, в них входят:
Проверка имени файла, проверка на чтение файла и его существования,
Проверка на редактирование, проверка на создание, проверка на удаление
Получение имени файла из его адресса, перемещение файла

Должны остатся почти все копии и вызываться начиная символом /
"""

"""
Нужно создать функции для смены языка, перменные называть именем того
что должны выводить на англ, и присываивать содержимое функцией...
может и создаим спсиок може временный...
lang.terminal
"""

"""
print(["/", "\\"[0][0]])
address_file = "index.terminal"
if "/" not in address_file and "\\" not in address_file:
    print(1)
else:
    print(2)
address_file = "read/terminals/index.terminal"
if "/" not in address_file and "\\" not in address_file:
    print(3)
else:
    print(4)
"""
#TODO:
"""
не удалять этот коменнтарий. На будущие, нельзя создавать lib, так как
мы используем перемещение фалов, а не их редактирование и можем
случайно повредить чужую библиотеку."""
"try:\tfrom work import lib\nexcept:\tpass\n" # иморт если файл есть.


# ~ def if -- if - else append









exit()
#import and start modul-file:
start_file()

#start console:
start_me()
